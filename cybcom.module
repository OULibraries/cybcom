<?php

/**
 * @file
 * This module provides tools for publishing Drupal content into a CyberCommons
 * site.
 */

/**
 *  Implements hook_admin
 */
function cybcom_admin() {
  $form = array();

  $form['cybcom_xmlurl'] = array(
    '#type' => 'textfield',
    '#title' => t('CyberCommons URL'),
    '#default_value' => variable_get('cybcom_xmlurl', ""),
    '#required' => TRUE,
  );

  $form['cybcom_token'] = array(
    '#type' => 'textfield',
    '#title' => t('CyberCommons token'),
    '#default_value' => variable_get('cybcom_token', ""),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 *  Implements hook_menu()
 */
function cybcom_menu() {
  $items = array();

  // Admin Settings
  $items['admin/config/cybcom'] = array(
    'title' => 'CyberCommons Settings',
    'description' => 'Lorem ipsum dolor sit amet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cybcom_admin'),
    'access arguments' => array('administer cybcom settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  // JSON preview of how content will be sent to Cyber Commons
  $items['node/%cybcom_menu/cybcom/preview'] = array (
    'title' => "JSON Preview" ,
    'type' => MENU_LOCAL_TASK,
    'page callback' => '_cybcom_loadNodeHtml',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),

  );

  // Json representation of node
  $items['node/%cybcom_menu/cybcom/json'] = array (
    'title' =>"JSON" ,
    'type' => MENU_NORMAL_ITEM,
    'page callback' => '_cybcom_loadNode',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'delivery callback' => 'drupal_json_output',
  );

  return $items;
}


/**
 * Menu loader callback to ensure CyberCommons menu routes only apply to item
 * nodes.
 */
function cybcom_menu_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if($node->type == 'item') {
    return $node;
  }
  return FALSE;
}

/**
 *  Post to cybercommns to get XML representation of node
 */
function cybcom_mintxml($nid) {
  watchdog('cybcom', "mintxml called for node ". $nid );

  try {
    // load data to mint
    $nd = entity_load_single('node', $nid);
    $bd = $nd->type;

    // do some validation
    if( $bd != "item") {
      watchdog('cybcom', "Tried to mint invalid node type". $nid );
      return;
    }

    $w = entity_metadata_wrapper("node", $nd, array('bundle' => $bd));

    // get config
    $cybcom_xmlurl = variable_get('cybcom_xmlurl', "");
    $cybcom_token = variable_get('cybcom_token', "");

    // structure as array for cybercommons
    $cybcom_data = _cybcom_wrap2array($w);

    //send data to cyber commons
    $response = _send2cybcom($cybcom_xmlurl, $cybcom_token, "speccoll.tmpl", $cybcom_data);

    // save resonse url
    $task= $response->json();

    // clear out the previous task's info
    $w->field_cybcom_data = NULL;	

    // create a new entity and associate it with the current item
    $cybcom_data = entity_create('field_collection_item', array('field_name' => 'field_cybcom_data'));
    $cybcom_data->setHostEntity('node', $nd);

    // load wrapper for new cybercom data entity and set values
    $cdw = entity_metadata_wrapper('field_collection_item', $cybcom_data);
    $cdw->field_cybcom_task->set($task['task_id'] );
    $cdw->field_cybcom_task_uri->set( array( 'url' => $task['result_url']));

    // save cybcom data entity and parent node
    $cdw->save();
    $w->save();


  } catch (EntityMetadataWrapperException $e) {
    watchdog_exception('cybcom', $e);
    drupal_set_message(t('There was a problem processing the node.'), 'error'); 
  } catch(GuzzleHttp\Exception\TransferException $e) {
    watchdog_exception('cybcom', $e);
    drupal_set_message(t('There was a problem publishing data to CyberCommons.'), 'error'); 
  }
}


function cybcom_getresult($nid) {
 watchdog('cybcom', "get result called for node ". $nid );

 try {

   // load node to consider
   $nd = entity_load_single('node', $nid);
   $bd = $nd->type;

   // do some validation
   if( $bd != "item") {
     watchdog('cybcom', "Tried to mint invalid node type". $nid );
     return;
   }

   // wrap the entity
   $w = entity_metadata_wrapper("node", $nd, array('bundle' => $bd));

   // get cybcom config
   $cybcom_xmlurl = variable_get('cybcom_xmlurl', "");
   $cybcom_token = variable_get('cybcom_token', "");

   // What's the status of the task for this node?
   $cybcom_task = $w->field_cybcom_data->field_cybcom_task->value();
   $task_result = _getTaskResult($cybcom_xmlurl, $cybcom_token, $cybcom_task);

   $w->field_cybcom_data->field_cybcom_status->set( $task_result->status );
   $w->field_cybcom_data->field_cybcom_result_uri->set( array('url' => $task_result->result) );
   $w->field_cybcom_data->save();
   $w->save();

 } catch (EntityMetadataWrapperException $e) {
   watchdog_exception('cybcom', $e);
   drupal_set_message(t('Problem getting data for CyberCommons query. Has this node been published to CyberCommons?'), 'error');

 } catch(GuzzleHttp\Exception\TransferException $e) {
   drupal_set_message(t('Problem getting task data from CyberCommons.'), 'error');
   watchdog_exception('cybcom', $e);
 }

}




/**
 * Load node content into CyberCommons array structure.
 */
function _cybcom_loadNode($node) {

  try {
    $nid = $node->nid;
    // load data to mint
    $nd = entity_load_single('node', $nid);
    $bd = $nd->type;
    $w = entity_metadata_wrapper("node", $nd, array('bundle' => $bd));

    return _cybcom_wrap2array($w);

  } catch (EntityMetadataWrapperException $e) {
    watchdog(
      'cybcom',
      'EntityMetadataWrapper exception in %function() <pre>@trace</pre>',
      array('%function' => __FUNCTION__, '@trace' => $e->getTraceAsString()),
      WATCHDOG_ERROR
    );
  }
}

/**
 * Load node content as html view of JSON
 */
function _cybcom_loadNodeHtml($node) {

  $ccArray = _cybcom_loadNode($node);

  $ccArrayMarkup  = '<pre>';
  $ccArrayMarkup .= htmlspecialchars(json_encode($ccArray, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
  // We don't want escaped slashes because it looks weird when we turn things in to html
  $ccArrayMarkup .='</pre>';

  $output = array(
    'content' => array(
      '#type' => 'markup',
      '#markup' => $ccArrayMarkup,
    )

  );
  return $output;
}

/**
 * Convert Entity Metadata Wrapper to simplified array suitable for
 * jsonification.
 */
function _cybcom_wrap2array($w) {
  $myContent=array();

  foreach ($w->getPropertyInfo() as $field_name => $field_props) {

    // For Drupal nodes, "title" isn't a normal entity field,
    if("title" == $field_name) {
      $myVal = $w->$field_name->value();
      if( empty(  $myVal )) { continue;}
      $myContent["title"]=$myVal;
      continue;
    }

    // If it isn't an entity field or a special case that we've already handled,
    // it's probably a Drupal enternal that we should skip
    if(! preg_match('/field_.*/', $field_name)) {
      continue;
    }

    // Don't worry about cybercom response fields, either
    if( preg_match('/field_cybcom.*/', $field_name)) {
      continue;
    }

    // field_name could be a field name but it could also be the parent field of
    // a field collection, so we might ignore it
    if("field_name" == $field_name && ! isset( $field_props->field)) {
      continue;
    }


    // For fields that aren't special cases, we'll process them all by type.
    switch( $field_props['type'] )  {

      // Get single and multi-value text fields.
      case "integer":
      case "boolean":
      case "text":
      case "list<text>":
        $myVal = $w->$field_name->value();
        if( empty(  $myVal )) { break; }

        $myContent[$field_name]=$myVal;
        break;

        // Get the term name for taxonomy terms
      case "taxonomy_term":
        $myVal = $w->$field_name->value();
        if( empty(  $myVal )) {break; }

        $myContent[$field_name]=$myVal->name;
        break;

      case "list<taxonomy_term>":
        $myVec = $w->$field_name->value();
        if( empty($myVec)) { break; }

        $getName = function($i) { return $i->name ; };
        $myContent[$field_name] = array_map( $getName , $myVec);
        break;

        // Get an ISO 8601 string representation of Drupal date fields
      case "date":
        $myVal = $w->$field_name->value();
        if( empty($myVec)) { break; }

        $myContent[$field_name]=date(DATE_ATOM, $myVal);
        break;

      case "list<date>":
        $myVec = $w->$field_name->value();
        if( empty( $myVec)) {break;}

        $getDate = function($i) { return date(DATE_ATOM, $i); };
        $myContent[$field_name] = array_map($getDate, $myVec);
        break;

        // Process structured entities recursively
      case "list<node>":
      case (preg_match('/list<field_collection_.*/', $field_props['type']) ? $field_props['type'] : !$field_props['type'] ) :
        $myVec = iterator_to_array($w->$field_name);
        if( empty( $myVec)) {break;}

        $getArr = function($i) { return _cybcom_wrap2array($i);};
        $myContent[$field_name] = array_map( $getArr, $myVec);
        break;

        // Get properties of url fields
      case (preg_match('/list<field_.*_link>/', $field_props['type']) ? $field_props['type'] : !$field_props['type'] ) :
        $myVec = iterator_to_array($w->$field_name);
        if( empty( $myVec)) {break;}

        $getLink = function ($i) {
          $myLink = array();
          if( $i->raw() ) {
            $myLink=$i->value();
            unset($myLink['attributes']); // Get rid of context-specific attributes
          }
          return $myLink;
        };
        $myContent[$field_name] = array_map( $getLink, $myVec);

        break;

      case (preg_match('/field_.*_link/', $field_props['type']) ? $field_props['type'] : !$field_props['type'] ) :
        $myLink = array();
        if( $w->$field_name->raw() ) {
          $myLink=$w->$field_name->value();
          unset($myLink['attributes']); // Get rid of context-specific attributes
        }
        $myContent[$field_name] = $myLink;
        break;

        // Log unhandled fields.
      default:
        watchdog("cybcom",
          "Unhandled field %field of type %type in entity %eid.",
          array("%field" => $field_name, "%eid" => $w->getIdentifier(), "%type" => $field_props['type']  )
        );
    }
  }
  return $myContent;
}

/**
 * POST array data to a CyberCommons site for rendering in to xml
 */
function _send2cybcom($cybcom_xmlurl, $cybcom_token, $cybcom_template, $cybcom_data) {

  $cyb_client = new GuzzleHttp\Client([
                  'defaults' => [
                    'headers' => [
                      'Content-Type' => 'application/json',
                      "Authorization" => "Token ".$cybcom_token,
                    ]]]);

  $cyb_body = [
    "function"=>"xmlgenq.tasks.xmltemplate.metadataTemplateCreation",
    "queue"=>"celery",
    "args" => [
      $cybcom_data,
    ],
    "kwargs"=> [
      "templatename" => $cybcom_template,
      "outname" => $cybcom_template.".xml"
    ],
    "tags"=> ["example.xml"],
  ];

  $response = $cyb_client->post(
    $cybcom_xmlurl."/api/queue/run/xmlgenq.tasks.xmltemplate.metadataTemplateCreation/.json",
    ['body' => json_encode($cyb_body),]
  );

  return $response;
}


/**
 * POST array data to a CyberCommons site for rendering in to xml
 */
function _getTaskResult($cybcom_xmlurl, $cybcom_token, $cybcom_taskid) {

  $cyb_client = new GuzzleHttp\Client([
                  'defaults' => [
                    'headers' => [
                      'Content-Type' => 'application/json',
                      "Authorization" => "Token ".$cybcom_token,
                    ]]]);

  $response = $cyb_client->get($cybcom_xmlurl."/api/queue/task/".$cybcom_taskid."/.json");
  $task_json = json_decode($response->getBody() );


  return $task_json->result ;
}
